const Request = require('../../models/Request')
const Transaction = require('../../models/Transaction')
const Portfolio = require('../../models/Portfolio')

const configs = require('../../configs')

const Web3 = require('web3')
const web3 = new Web3(new Web3.providers.HttpProvider(configs.web3httpProvider))

module.exports = () => new Promise(async (resolve, reject) => {
  // const portfolios = await Portfolio.find({
  //   state: 'active',
  //   smart_contract: { $exists: true }
  // })
  // // resolve()
  // const contracts = []
  // for (let portfolio of portfolios) {
  //   if (portfolio.smart_contract !== '-')
  //     contracts.push(portfolio.smart_contract)
  // }
  const lastTransaction = await Transaction.find().sort({ block: -1 }).limit(1)
  const currentBlock = await new Promise((resolve, reject) => web3.eth.getBlockNumber((err, res) => err ? reject(err) : resolve(res)))
  const startBlock = lastTransaction.length === 0 ? currentBlock - 10000 : lastTransaction[0].block
  for (let i = startBlock; i < currentBlock; i++) {
    const block = await new Promise((resolve, reject) => web3.eth.getBlock(i, true, (err, res) => {
      if (err) {
        console.log(err)
      } else {
        resolve(res)
      }
    }))
    // console.log(`Reading block ${i} which created at ${new Date(block.timestamp * 1000)}`)
    let foundTransactions = 0
    if (block && block.transactions) {
      block.transactions.forEach(async (transaction) => {
        const platformContract = await Portfolio.findOne({ 
          $or: [{
            smart_contract: new RegExp(transaction.from, 'ig')
          }, {
            smart_contract: new RegExp(transaction.to, 'ig')
          }]
        })
        // if (transaction.to.toLowerCase() === '0x511d214a4eDc16084D0f3BFb3B8FB733086e24cE'.toLowerCase()) {
        //   console.log(transaction)
        //   console.log(platformContract)
        // }
        if (platformContract !== null) {
          const smartContract = platformContract.smart_contract
          const thisTransaction = await Transaction.findOne({
            smart_contract: smartContract,
            block: i,
            index: transaction.transactionIndex
          })
          if (thisTransaction === null) {
            const newTransaction = new Transaction({
              smart_contract: smartContract,
              block: i,
              index: transaction.transactionIndex,
              date: new Date(block.timestamp * 1000),
              data: transaction
            })
            await newTransaction.save()
            // foundTransactions++
          }
        }
      })
    }
    // console.log(`Found ${foundTransactions} new transactions on block ${block.number}`)
  }
})